// Mocks generated by Mockito 5.4.4 from annotations
// in money_tracker/test/TopLevel/transaction_viewmodel_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:mockito/mockito.dart' as _i1;
import 'package:money_tracker/DataCentral/financial_category_model.dart' as _i5;
import 'package:money_tracker/DataCentral/transaction_model.dart' as _i4;
import 'package:money_tracker/services/category_service_abstract.dart' as _i6;
import 'package:money_tracker/services/transaction_service_abstract.dart'
    as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [TransactionService].
///
/// See the documentation for Mockito's code generation for more information.
class MockTransactionService extends _i1.Mock
    implements _i2.TransactionService {
  MockTransactionService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<List<_i4.Transaction>> getAllTransactions() => (super.noSuchMethod(
        Invocation.method(
          #getAllTransactions,
          [],
        ),
        returnValue:
            _i3.Future<List<_i4.Transaction>>.value(<_i4.Transaction>[]),
      ) as _i3.Future<List<_i4.Transaction>>);

  @override
  _i3.Future<List<_i4.Transaction>> getAllTransactionsFor(
          _i5.FinancialCategory? category) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAllTransactionsFor,
          [category],
        ),
        returnValue:
            _i3.Future<List<_i4.Transaction>>.value(<_i4.Transaction>[]),
      ) as _i3.Future<List<_i4.Transaction>>);

  @override
  _i3.Future<bool> addTransaction(
    int? category,
    DateTime? date,
    double? cost,
    String? extraNotes,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #addTransaction,
          [
            category,
            date,
            cost,
            extraNotes,
          ],
        ),
        returnValue: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);

  @override
  _i3.Future<bool> updateTransaction(_i4.Transaction? transaction) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateTransaction,
          [transaction],
        ),
        returnValue: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);

  @override
  _i3.Future<bool> deleteTransaction(_i4.Transaction? transaction) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteTransaction,
          [transaction],
        ),
        returnValue: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);
}

/// A class which mocks [CategoryService].
///
/// See the documentation for Mockito's code generation for more information.
class MockCategoryService extends _i1.Mock implements _i6.CategoryService {
  MockCategoryService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<bool> createCategory(String? name) => (super.noSuchMethod(
        Invocation.method(
          #createCategory,
          [name],
        ),
        returnValue: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);

  @override
  _i3.Future<bool> updateCategory(
    int? categoryId,
    String? newName,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateCategory,
          [
            categoryId,
            newName,
          ],
        ),
        returnValue: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);

  @override
  _i3.Future<bool> removeCategory(_i5.FinancialCategory? category) =>
      (super.noSuchMethod(
        Invocation.method(
          #removeCategory,
          [category],
        ),
        returnValue: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);

  @override
  _i3.Future<List<_i5.FinancialCategory>> getAllCategories() =>
      (super.noSuchMethod(
        Invocation.method(
          #getAllCategories,
          [],
        ),
        returnValue: _i3.Future<List<_i5.FinancialCategory>>.value(
            <_i5.FinancialCategory>[]),
      ) as _i3.Future<List<_i5.FinancialCategory>>);

  @override
  _i3.Future<_i5.FinancialCategory?> getCategoryByName(String? name) =>
      (super.noSuchMethod(
        Invocation.method(
          #getCategoryByName,
          [name],
        ),
        returnValue: _i3.Future<_i5.FinancialCategory?>.value(),
      ) as _i3.Future<_i5.FinancialCategory?>);

  @override
  _i3.Future<_i5.FinancialCategory?> getCategoryByTag(int? tag) =>
      (super.noSuchMethod(
        Invocation.method(
          #getCategoryByTag,
          [tag],
        ),
        returnValue: _i3.Future<_i5.FinancialCategory?>.value(),
      ) as _i3.Future<_i5.FinancialCategory?>);
}
