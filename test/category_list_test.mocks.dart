// Mocks generated by Mockito 5.4.4 from annotations
// in money_tracker/test/category_list_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:mockito/mockito.dart' as _i1;
import 'package:money_tracker/DataCentral/financial_category_model.dart' as _i2;
import 'package:money_tracker/DataCentral/transaction_model.dart' as _i3;
import 'package:money_tracker/services/category_service_abstract.dart' as _i4;
import 'package:money_tracker/services/transaction_service_abstract.dart'
    as _i6;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeFinancialCategory_0 extends _i1.SmartFake
    implements _i2.FinancialCategory {
  _FakeFinancialCategory_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeTransaction_1 extends _i1.SmartFake implements _i3.Transaction {
  _FakeTransaction_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [CategoryService].
///
/// See the documentation for Mockito's code generation for more information.
class MockCategoryService extends _i1.Mock implements _i4.CategoryService {
  MockCategoryService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<int> createCategory(String? name) => (super.noSuchMethod(
        Invocation.method(
          #createCategory,
          [name],
        ),
        returnValue: _i5.Future<int>.value(0),
      ) as _i5.Future<int>);

  @override
  _i5.Future<_i2.FinancialCategory> updateCategory(
    int? categoryId,
    String? newName,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateCategory,
          [
            categoryId,
            newName,
          ],
        ),
        returnValue:
            _i5.Future<_i2.FinancialCategory>.value(_FakeFinancialCategory_0(
          this,
          Invocation.method(
            #updateCategory,
            [
              categoryId,
              newName,
            ],
          ),
        )),
      ) as _i5.Future<_i2.FinancialCategory>);

  @override
  _i5.Future<_i2.FinancialCategory> removeCategory(
          _i2.FinancialCategory? category) =>
      (super.noSuchMethod(
        Invocation.method(
          #removeCategory,
          [category],
        ),
        returnValue:
            _i5.Future<_i2.FinancialCategory>.value(_FakeFinancialCategory_0(
          this,
          Invocation.method(
            #removeCategory,
            [category],
          ),
        )),
      ) as _i5.Future<_i2.FinancialCategory>);

  @override
  _i5.Future<List<_i2.FinancialCategory>> getAllCategories() =>
      (super.noSuchMethod(
        Invocation.method(
          #getAllCategories,
          [],
        ),
        returnValue: _i5.Future<List<_i2.FinancialCategory>>.value(
            <_i2.FinancialCategory>[]),
      ) as _i5.Future<List<_i2.FinancialCategory>>);

  @override
  _i5.Future<_i2.FinancialCategory?> getCategoryByName(String? name) =>
      (super.noSuchMethod(
        Invocation.method(
          #getCategoryByName,
          [name],
        ),
        returnValue: _i5.Future<_i2.FinancialCategory?>.value(),
      ) as _i5.Future<_i2.FinancialCategory?>);

  @override
  _i5.Future<_i2.FinancialCategory?> getCategoryByTag(int? tag) =>
      (super.noSuchMethod(
        Invocation.method(
          #getCategoryByTag,
          [tag],
        ),
        returnValue: _i5.Future<_i2.FinancialCategory?>.value(),
      ) as _i5.Future<_i2.FinancialCategory?>);
}

/// A class which mocks [TransactionService].
///
/// See the documentation for Mockito's code generation for more information.
class MockTransactionService extends _i1.Mock
    implements _i6.TransactionService {
  MockTransactionService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<List<_i3.Transaction>> getAllTransactions() => (super.noSuchMethod(
        Invocation.method(
          #getAllTransactions,
          [],
        ),
        returnValue:
            _i5.Future<List<_i3.Transaction>>.value(<_i3.Transaction>[]),
      ) as _i5.Future<List<_i3.Transaction>>);

  @override
  _i5.Future<List<_i3.Transaction>> getAllTransactionsFor(
          _i2.FinancialCategory? category) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAllTransactionsFor,
          [category],
        ),
        returnValue:
            _i5.Future<List<_i3.Transaction>>.value(<_i3.Transaction>[]),
      ) as _i5.Future<List<_i3.Transaction>>);

  @override
  _i5.Future<int> addTransaction(
    int? category,
    DateTime? date,
    double? cost,
    String? extraNotes,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #addTransaction,
          [
            category,
            date,
            cost,
            extraNotes,
          ],
        ),
        returnValue: _i5.Future<int>.value(0),
      ) as _i5.Future<int>);

  @override
  _i5.Future<_i3.Transaction> updateTransaction(_i3.Transaction? transaction) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateTransaction,
          [transaction],
        ),
        returnValue: _i5.Future<_i3.Transaction>.value(_FakeTransaction_1(
          this,
          Invocation.method(
            #updateTransaction,
            [transaction],
          ),
        )),
      ) as _i5.Future<_i3.Transaction>);

  @override
  _i5.Future<_i3.Transaction> deleteTransaction(_i3.Transaction? transaction) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteTransaction,
          [transaction],
        ),
        returnValue: _i5.Future<_i3.Transaction>.value(_FakeTransaction_1(
          this,
          Invocation.method(
            #deleteTransaction,
            [transaction],
          ),
        )),
      ) as _i5.Future<_i3.Transaction>);
}
